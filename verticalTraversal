import java.util.*;

class Node {
    int data;
    Node left, right;

    Node(int data) {
        this.data = data;
        left = right = null;
    }
}

class Pair {
    Node node;
    int hd;

    Pair(Node node, int hd) {
        this.node = node;
        this.hd = hd;
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        List<Integer> list = new ArrayList<>();
        while (sc.hasNextInt()) {
            list.add(sc.nextInt());
        }
        sc.close();

        Node root = BuildTree(list);
        List<Integer> res = verticalTraversal(root);
        for (int i : res) {
            System.out.print(i + " ");
        }
    }

    public static Node BuildTree(List<Integer> ls) {
        if (ls.isEmpty() || ls.get(0) == -1) {
            return null;
        }
        Node root = new Node(ls.get(0));
        Queue<Node> q = new LinkedList<>();
        q.add(root);
        int i = 1;

        while (i < ls.size()) {  // Fixed condition from `q.size()`
            Node temp = q.poll();
            if (i < ls.size() && ls.get(i) != -1) {
                temp.left = new Node(ls.get(i));
                q.add(temp.left);
            }
            i++;

            if (i < ls.size() && ls.get(i) != -1) {
                temp.right = new Node(ls.get(i));
                q.add(temp.right);
            }
            i++;
        }
        return root;
    }

    public static List<Integer> verticalTraversal(Node root) {
        List<Integer> result = new ArrayList<>();
        if (root == null) {
            return result;
        }

        TreeMap<Integer, List<Integer>> mp = new TreeMap<>(); // Changed HashMap to TreeMap for sorted order
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(root, 0));  // Fixed queue element syntax

        while (!q.isEmpty()) {
            Pair p = q.poll();
            Node temp = p.node;
            int hd = p.hd;

            // Fix HashMap access
            mp.putIfAbsent(hd, new ArrayList<>());
            mp.get(hd).add(temp.data);

            if (temp.left != null) {
                q.add(new Pair(temp.left, hd - 1));  // Fixed syntax
            }
            if (temp.right != null) {
                q.add(new Pair(temp.right, hd + 1)); // Fixed syntax
            }
        }

        for (List<Integer> values : mp.values()) {
            result.addAll(values);  // Fixed traversal to extract values correctly
        }
        return result;
    }
}
