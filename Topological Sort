import java.util.*;

class Solution {
    public static List<Integer> topoSort(List<List<Integer>> adj) {
        int V = adj.size();
        List<Integer> res = new ArrayList<>();
        int[] indegree = new int[V];
        for (int i = 0; i < V; i++) {
            for (int it : adj.get(i)) {
                indegree[it]++;
            }
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < V; i++) {
            if (indegree[i] == 0) {
                q.add(i);
            }
        }
        while (!q.isEmpty()) {
            int curr = q.poll();
            res.add(curr);
            for (int it : adj.get(curr)) {
                indegree[it]--;
                if (indegree[it] == 0) {
                    q.add(it);
                }
            }
        }

        return res;
    }
}
class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        List<List<Integer>> adj = new ArrayList<>();
        while (sc.hasNextLine()) {
            String line = sc.nextLine().trim();
            if (line.isEmpty()) {
                break;
            }
            List<Integer> neighbors = new ArrayList<>();
            Scanner ls = new Scanner(line);
            while (ls.hasNextInt()) {
                neighbors.add(ls.nextInt());
            }
            adj.add(neighbors);
        }
        Solution obj = new Solution();
        List<Integer> res = obj.topoSort(adj);
        for (int nums : res) {
            System.out.print(nums + " ");
        }
    }
}
