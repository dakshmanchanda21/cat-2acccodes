import java.util.*;
class Solution {
    public static int[] topologicalSort(int V, List<List<Integer>> edges) {
        int[] inDegree = new int[V];
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }
        for (List<Integer> edge : edges) {
            int u = edge.get(0);
            int v = edge.get(1);
            adj.get(u).add(v);
            inDegree[v]++;
        }
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < V; i++) {
            if (inDegree[i] == 0) {
                queue.add(i);
            }
        }
        int[] topoOrder = new int[V];
        int index = 0;
        while (!queue.isEmpty()) {
            int node = queue.poll();
            topoOrder[index++] = node;
            for (int neighbor : adj.get(node)) {
                inDegree[neighbor]--;
                if (inDegree[neighbor] == 0) {
                    queue.add(neighbor);
                }
            }
        }
        return index == V ? topoOrder : new int[]{-1};
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int V = sc.nextInt();
        int E = sc.nextInt();
        List<List<Integer>> edges = new ArrayList<>();
        for (int i = 0; i < E; i++) {
            int u = sc.nextInt();
            int v = sc.nextInt();
            edges.add(Arrays.asList(u, v));
        }
        Solution obj = new Solution();
        int[] ans = obj.topologicalSort(V, edges);
        for (int num : ans) {
            System.out.print(num + " ");
        }
    }
}
