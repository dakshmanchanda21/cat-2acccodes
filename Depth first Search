import java.util.*;

class Solution {
    public List<Integer> dfsOfGraph(List<List<Integer>> adj) {
        int V = adj.size();
        boolean[] visited = new boolean[V];
        List<Integer> res = new ArrayList<>();
        Stack<Integer> stack = new Stack<>();

        int s = 0;
        stack.push(s);

        while (!stack.isEmpty()) {
            int curr = stack.pop();
            if (!visited[curr]) {
                visited[curr] = true;
                res.add(curr);
                for (int v = adj.get(curr).size() - 1; v >= 0; v--) {
                    int neighbor = adj.get(curr).get(v);
                    if (!visited[neighbor]) {
                        stack.push(neighbor);
                    }
                }
            }
        }
        return res;
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        int V = sc.nextInt(); // Number of vertices
        int E = sc.nextInt(); // Number of edges

        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }

        for (int i = 0; i < E; i++) {
            int u = sc.nextInt();
            int v = sc.nextInt();
            adj.get(u).add(v);
        }

        Solution obj = new Solution();
        List<Integer> ans = obj.dfsOfGraph(adj);
        for (int num : ans) {
            System.out.print(num + " ");
        }
    }
}
